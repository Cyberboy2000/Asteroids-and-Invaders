#pragma once
#include <SFML/Graphics.hpp>
#include "Input.h"
#include "Unitrig.h"
#include "Game.h"
#include "SimEvent.h"
#include <map>
#include <unordered_map>

namespace client {
	class Unitrig;

	/// <summary>
	/// Main controller for rendering in-world objects.
	/// </summary>
	class Boardrig : public Input::Listener
	{
	public:
		Boardrig(sf::RenderWindow* window, sim::Game* sim);
		~Boardrig();
		/// <summary>
		/// Render a frame to the window.
		/// </summary>
		void Render();
		/// <summary>
		/// Converts from world coordinates to screen pixels, and outputs the result.
		/// </summary>
		sf::Vector2f WorldToScreen(float x, float y);
		/// <summary>
		/// Screen to render to.
		/// </summary>
		sf::RenderWindow* window;
		std::map<int,Unitrig*> rigs;
		sim::Game* sim;
		/// <summary>
		/// Finds the texture with the given name if it's already loaded, otherwise loads it from a file.
		/// </summary>
		sf::Texture* getTexture(std::string name);
		/// <summary>
		/// Scales a world sprite to match the view.
		/// </summary>
		void scaleSprite(sf::Sprite* sprite);
		/// <summary>
		/// Converts from a world rotation to a sprite rotation.
		/// </summary>
		float worldToSpriteAngle(float worldAngle);
		/// <summary>
		/// Callback function for handling events generated by the simulation engine.
		/// </summary>
		void onSimEvent(SimEvent ev);
		/// <summary>
		/// Callback function for registering input listeners, triggers on the first frame a key is pressed down.
		/// </summary>
		void onKeyPressed(sf::Keyboard::Key key) override;
		//NonCopyable
		Boardrig(const Boardrig&) = delete;
		//NonCopyable
		void operator=(const Boardrig&) = delete;
	private:
		unsigned int _prevW = 0;
		unsigned int _prevH = 0;
		sf::Sprite* _bg;
		float _halfW;
		float _halfH;
		bool _debugging = false;
		void updateRatios();
		std::unordered_map<std::string, sf::Texture*> _loadedTextures;
	};
}
